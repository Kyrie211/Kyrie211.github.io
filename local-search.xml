<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring基础（二）IOC</title>
    <link href="/2020/08/07/Spring%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89IOC/"/>
    <url>/2020/08/07/Spring%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89IOC/</url>
    
    <content type="html"><![CDATA[<h1 id="2-IOC容器及Bean的配置"><a href="#2-IOC容器及Bean的配置" class="headerlink" title="2.IOC容器及Bean的配置"></a>2.IOC容器及Bean的配置</h1><h2 id="1-IOC和DI"><a href="#1-IOC和DI" class="headerlink" title="1 IOC和DI"></a>1 IOC和DI</h2><h3 id="1-1-IOC-Inversion-of-Control-：-反转控制。"><a href="#1-1-IOC-Inversion-of-Control-：-反转控制。" class="headerlink" title="1.1 IOC(Inversion of Control)： 反转控制。"></a>1.1 IOC(Inversion of Control)： 反转控制。</h3><blockquote><p>在应用程序中的组件需要获取资源时，传统的方式是组件主动的从容器中获取所需<br>要的资源，在这样的模式下开发人员往往需要知道在具体容器中特定资源的获取方式，<br>增加了学习成本，同时降低了开发效率。<br>反转控制的思想完全颠覆了应用程序组件获取资源的传统方式：反转了资源的获取<br>方向——改由容器主动的将资源推送给需要的组件，开发人员不需要知道容器是如何创<br>建资源对象的，只需要提供接收资源的方式即可，极大的降低了学习成本，提高了开发<br>的效率。这种行为也称为查找的被动形式。</p></blockquote><h3 id="1-2-DI-Dependency-Injection-：-依赖注入。"><a href="#1-2-DI-Dependency-Injection-：-依赖注入。" class="headerlink" title="1.2 DI(Dependency Injection)： 依赖注入。"></a>1.2 DI(Dependency Injection)： 依赖注入。</h3><blockquote><p>IOC 的另一种表述方式：即组件以一些预先定义好的方式(例如：setter 方法)接受<br>来自于容器的资源注入。相对于 IOC 而言，这种表述更直接。</p></blockquote><h3 id="1-3-IOC-容器在-Spring-中的实现"><a href="#1-3-IOC-容器在-Spring-中的实现" class="headerlink" title="1.3 IOC 容器在 Spring 中的实现"></a>1.3 IOC 容器在 Spring 中的实现</h3><blockquote><p>[1]在通过 IOC 容器读取 Bean 的实例之前，需要先将 IOC 容器本身实例化。<br>[2]Spring 提供了 IOC 容器的两种实现方式</p><blockquote><p>(1)BeanFactory：IOC 容器的基本实现，是 Spring 内部的基础设施，是面向 Spring<br>本身的，不是提供给开发人员使用的。<br>(2)ApplicationContext：BeanFactory 的子接口，提供了更多高级特性。面向 Spring<br>的使用者，几乎所有场合都使用 ApplicationContext 而不是底层的 BeanFactory。</p></blockquote></blockquote><h3 id="1-4-ApplicationContext-的主要实现类"><a href="#1-4-ApplicationContext-的主要实现类" class="headerlink" title="1.4 ApplicationContext 的主要实现类"></a>1.4 ApplicationContext 的主要实现类</h3><p>[1]ClassPathXmlApplicationContext：对应类路径下的 XML 格式的配置文件</p><p>[2]FileSystemXmlApplicationContext：对应文件系统中的 XML 格式的配置文件</p><p>[3]在初始化时就创建单例的 bean，也可以通过配置的方式指定创建的 Bean 是多实<br>例的。</p><h3 id="1-5-ConfigurableApplicationContext"><a href="#1-5-ConfigurableApplicationContext" class="headerlink" title="1.5 ConfigurableApplicationContext"></a>1.5 ConfigurableApplicationContext</h3><p>[1]是 ApplicationContext 的子接口，包含一些扩展方法</p><p>[2]refresh()和 close()让 ApplicationContext 具有启动、关闭和刷新上下文的能力。</p><h3 id="1-6-WebApplicationContext"><a href="#1-6-WebApplicationContext" class="headerlink" title="1.6 WebApplicationContext"></a>1.6 WebApplicationContext</h3><p>专门为 WEB 应用而准备的，它允许从相对于 WEB 根目录的路径中完成初始化工作</p>]]></content>
    
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>框架</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring基础（一）概述</title>
    <link href="/2020/08/05/Spring%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E6%A6%82%E8%BF%B0/"/>
    <url>/2020/08/05/Spring%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="01-Spring概述"><a href="#01-Spring概述" class="headerlink" title="01 Spring概述"></a>01 Spring概述</h1><h2 id="1-Spring-概述"><a href="#1-Spring-概述" class="headerlink" title="1 Spring 概述"></a>1 Spring 概述</h2><p>①Spring 是一个开源框架</p><p>②Spring 为简化企业级开发而生，使用 Spring，JavaBean 就可以实现很多以前要靠 EJB<br>才能实现的功能。同样的功能，在 EJB 中要通过繁琐的配置和复杂的代码才能够实现，而在<br>Spring 中却非常的优雅和简洁。</p><p>③Spring 是一个 <strong><em>IOC(DI)</em></strong>和 <strong><em>AOP</em></strong> 容器框架。(<strong><em>控制反转</em></strong> &amp;&amp; <strong><em>面向切面编程</em></strong>)</p><p>④Spring 的优良特性</p><blockquote><p>[1] 非侵入式：基于 Spring 开发的应用中的对象可以不依赖于 Spring 的 API<br>[2] 依赖注入：DI——Dependency Injection，反转控制(IOC)最经典的实现。<br>[3] 面向切面编程：Aspect Oriented Programming——AOP<br>[4] 容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期<br>[5] 组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象。<br>[6] 一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第<br>三方类库（实际上 Spring 自身也提供了表述层的 SpringMVC 和持久层的 Spring JDBC）。</p></blockquote><p>⑤Spring 目前的版本<br>缺图，待补</p><p>⑥Spring 模块<br>缺图，待补</p><h2 id="2-搭建-Spring-运行时环境"><a href="#2-搭建-Spring-运行时环境" class="headerlink" title="2 搭建 Spring 运行时环境"></a>2 搭建 Spring 运行时环境</h2><p>搭建Spring运行环境，有两种方式 — 大多数的环境搭建都如此。</p><h3 id="2-1-导入jar包方式"><a href="#2-1-导入jar包方式" class="headerlink" title="2.1 导入jar包方式"></a>2.1 导入jar包方式</h3><p>①加入 JAR 包</p><pre><code class="hljs css"><span class="hljs-selector-attr">[1]</span><span class="hljs-selector-tag">Spring</span> 自身 <span class="hljs-selector-tag">JAR</span> 包：<span class="hljs-selector-tag">spring-framework-4</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.RELEASE</span>\<span class="hljs-selector-tag">libs</span> 目录下<span class="hljs-selector-tag">spring-beans-4</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.RELEASE</span><span class="hljs-selector-class">.jar</span><span class="hljs-selector-tag">spring-context-4</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.RELEASE</span><span class="hljs-selector-class">.jar</span><span class="hljs-selector-tag">spring-core-4</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.RELEASE</span><span class="hljs-selector-class">.jar</span><span class="hljs-selector-tag">spring-expression-4</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.RELEASE</span><span class="hljs-selector-class">.jar</span><span class="hljs-selector-attr">[2]</span><span class="hljs-selector-tag">commons-logging-1</span><span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.jar</span></code></pre><blockquote><p>注意的是：你所需要导入的jar包需要根据实际需要来导入。换言之，你应该要了解Spring各个模块所需的jar包都是哪些。 Spring模块图见上文。</p></blockquote><p>②根据需要创建 Spring 配置文件</p><h3 id="2-2-Maven导入依赖"><a href="#2-2-Maven导入依赖" class="headerlink" title="2.2 Maven导入依赖"></a>2.2 Maven导入依赖</h3><p>Maven是一种项目管理工具，具体做的事就是：从’本地仓库’ 或 ‘远程仓库’中导入所需要的依赖坐标。这里所说的’依赖坐标’就是相关jar包的坐标，只需导入坐标的好处是可以降低程序臃肿程度，jar包就只用一份就可。</p><p>代码示例：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 导入spring-core依赖 --&gt;</span><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.2.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h2 id="3-Spring-HelloWorld"><a href="#3-Spring-HelloWorld" class="headerlink" title="3 Spring HelloWorld"></a>3 Spring HelloWorld</h2><p>一般的，学习一门编程语言，总是会以编写出HelloWorld代码来简单入门。<br>不失一般性，这里将以Spring HelloWorld方式来简单入门。</p><blockquote><p>①目标：使用 Spring 创建对象，为属性赋值<br>②创建 Student 类</p></blockquote><pre><code class="hljs angelscript"><span class="hljs-comment">// Student.java</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Student</span> &#123;    <span class="hljs-keyword">private</span> Integer studentId;    <span class="hljs-keyword">private</span> String stuName;    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> age;    <span class="hljs-comment">// 省略getter/setter/toString</span>&#125;</code></pre><blockquote><p>③创建 Spring 配置文件</p></blockquote><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- spring配置文件,这里命名为helloworld.xml --&gt;</span><span class="hljs-comment">&lt;!-- 名字命名无强制要求，这里为了突出意图，以此命名 --&gt;</span><span class="hljs-comment">&lt;!-- 使用bean元素定义一个由IOC容器创建的对象 --&gt;</span><span class="hljs-comment">&lt;!-- class属性指定用于创建bean的全类名 --&gt;</span><span class="hljs-comment">&lt;!-- id属性指定用于引用bean实例的标识 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"student"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.atguigu.helloworld.bean.Student"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 使用property子元素为bean的属性赋值 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"studentId"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1001"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"stuName"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Tom2015"</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"age"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"20"</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span></code></pre><blockquote><p>④测试：通过 Spring 的 IOC 容器创建 Student 类实例</p></blockquote><pre><code class="hljs arduino"><span class="hljs-comment">// junit测试类 - 测试方法</span>@Test<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;    <span class="hljs-comment">//1.创建IOC容器对象</span>    ApplicationContext iocContainer = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">"helloworld.xml"</span>);    <span class="hljs-comment">//2.根据id值获取bean实例对象</span>    Student student = (Student) iocContainer.getBean(<span class="hljs-string">"student"</span>);    <span class="hljs-comment">//3.打印bean</span>    System.out.<span class="hljs-built_in">println</span>(student);&#125;</code></pre><blockquote><p>⑤验证：Spring 在创建 IOC 容器对象时，就已经完成了 bean 的创建和属性的赋值。</p></blockquote><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4 小结"></a>4 小结</h2><p>Spring框架相当于是一个容器，所有的类一旦被Spring容器管理起来，就不用我们去操心这些类的其一系列事情。<br>我们需要做的就是放心的将这些类交由Spring容器管理，然后舒舒服服的享受Spring带给我们的便利。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SSM</tag>
      
      <tag>框架</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis框架总结（第一篇）</title>
    <link href="/2020/07/31/Mybatis%E6%80%BB%E7%BB%93(%E7%AC%AC%E4%B8%80%E7%AF%87)/"/>
    <url>/2020/07/31/Mybatis%E6%80%BB%E7%BB%93(%E7%AC%AC%E4%B8%80%E7%AF%87)/</url>
    
    <content type="html"><![CDATA[<h1 id="1-框架概述"><a href="#1-框架概述" class="headerlink" title="1 框架概述"></a>1 框架概述</h1><h2 id="1-1-什么是框架"><a href="#1-1-什么是框架" class="headerlink" title="1.1 什么是框架"></a>1.1 什么是框架</h2><h3 id="1-1-1-什么是框架"><a href="#1-1-1-什么是框架" class="headerlink" title="1.1.1 什么是框架"></a>1.1.1 什么是框架</h3><ul><li>框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。</li><li>简而言之，框架其实就是某种应用的半成品，就是一组组件。</li></ul><hr><h3 id="1-1-2-框架的作用"><a href="#1-1-2-框架的作用" class="headerlink" title="1.1.2 框架的作用"></a>1.1.2 框架的作用</h3><ul><li>框架要解决的最重要的一个问题是技术整合的问题。</li><li>软件企业的研发将集中在应用的设计上，而不是具体的技术实现，技术实现是应用的底层支撑，它不应该直接对应用产生影响。</li><li>框架一般处在低层应用平台（如J2EE）和高层业务逻辑之间的中间层。</li></ul><h3 id="1-1-3-Mybatis框架概述"><a href="#1-1-3-Mybatis框架概述" class="headerlink" title="1.1.3 Mybatis框架概述"></a>1.1.3 Mybatis框架概述</h3><ul><li><p>mybatis是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</p></li><li><p>mybatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。</p></li><li><p>采用ORM思想解决了实体和数据库映射的问题，对jdbc进行了封装，屏蔽了jdbc api底层访问细节，使我们不用与jdbc-api打交道，就可以完成对数据库的持久化操作。</p></li></ul><hr><h2 id="1-2-JDBC编程回顾"><a href="#1-2-JDBC编程回顾" class="headerlink" title="1.2 JDBC编程回顾"></a>1.2 JDBC编程回顾</h2><h3 id="1-2-1-JDBC编程代码"><a href="#1-2-1-JDBC编程代码" class="headerlink" title="1.2.1 JDBC编程代码"></a>1.2.1 JDBC编程代码</h3><pre><code class="hljs d"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) &#123;Connection connection = <span class="hljs-literal">null</span>;PreparedStatement preparedStatement = <span class="hljs-literal">null</span>;ResultSet resultSet = <span class="hljs-literal">null</span>;<span class="hljs-keyword">try</span> &#123;<span class="hljs-comment">//加载数据库驱动</span>Class.forName(<span class="hljs-string">"com.mysql.jdbc.Driver"</span>);<span class="hljs-comment">//通过驱动管理类获取数据库链接</span>connection = DriverManager.getConnection(<span class="hljs-string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span>,<span class="hljs-string">"ro</span><span class="hljs-string">ot"</span>, <span class="hljs-string">"root"</span>);<span class="hljs-comment">//定义 sql 语句 ?表示占位符</span>String sql = <span class="hljs-string">"select * from user where username = ?"</span>;<span class="hljs-comment">//获取预处理 statement</span>preparedStatement = connection.prepareStatement(sql);<span class="hljs-comment">//设置参数，第一个参数为 sql 语句中参数的序号（从 1 开始），第二个参数为设置的</span>参数值preparedStatement.setString(<span class="hljs-number">1</span>, <span class="hljs-string">"王五"</span>);<span class="hljs-comment">//向数据库发出 sql 执行查询，查询出结果集</span>resultSet = preparedStatement.executeQuery();<span class="hljs-comment">//遍历查询结果集</span><span class="hljs-keyword">while</span>(resultSet.next())&#123; System.<span class="hljs-keyword">out</span>.println(resultSet.getString(<span class="hljs-string">"id"</span>)+<span class="hljs-string">"</span><span class="hljs-string"> "</span>+resultSet.getString(<span class="hljs-string">"username"</span>));&#125;&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;e.printStackTrace();&#125;<span class="hljs-keyword">finally</span>&#123;<span class="hljs-comment">//释放资源</span><span class="hljs-keyword">if</span>(resultSet!=<span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">try</span> &#123;resultSet.close();&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125; &#125;<span class="hljs-keyword">if</span>(preparedStatement!=<span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">try</span> &#123;preparedStatement.close();&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125; &#125;<span class="hljs-keyword">if</span>(connection!=<span class="hljs-literal">null</span>)&#123;<span class="hljs-keyword">try</span> &#123;connection.close();&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;e.printStackTrace();&#125; &#125; &#125; &#125;</code></pre><h3 id="1-2-2-JDBC问题分析"><a href="#1-2-2-JDBC问题分析" class="headerlink" title="1.2.2 JDBC问题分析"></a>1.2.2 JDBC问题分析</h3><ul><li>1、数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。</li><li>2、Sql语句在代码中硬编码，造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。</li><li>3、使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还要修改代码，系统不易维护。</li><li>4、对结果集解析存在硬编码（查询列名），sql变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成pojo对象解析比较方便。</li></ul><hr><h1 id="2-Mybatis框架快速入门"><a href="#2-Mybatis框架快速入门" class="headerlink" title="2 Mybatis框架快速入门"></a>2 Mybatis框架快速入门</h1><h2 id="2-1-开发准备"><a href="#2-1-开发准备" class="headerlink" title="2.1 开发准备"></a>2.1 开发准备</h2><ul><li>方式一：</li></ul><blockquote><p>网上下载Mybatis相关jar包，将mybatis-x.x.x.jar文件加入到项目中，即可。</p></blockquote><ul><li>方式二：</li></ul><blockquote><p>如果使用 Maven 来构建项目，则需将下面的依赖代码置于 pom.xml 文件中：</p></blockquote><pre><code class="hljs dts"><span class="hljs-comment">// pom.xml中添加依赖</span><span class="hljs-params">&lt;dependency&gt;</span>  <span class="hljs-params">&lt;groupId&gt;</span>org.mybatis<span class="hljs-params">&lt;/groupId&gt;</span>  <span class="hljs-params">&lt;artifactId&gt;</span>mybatis<span class="hljs-params">&lt;/artifactId&gt;</span>  <span class="hljs-params">&lt;version&gt;</span>x.x.x<span class="hljs-params">&lt;/version&gt;</span><span class="hljs-params">&lt;/dependency&gt;</span></code></pre><hr><h2 id="2-2-Mybatis的主配置文件-SqlMapConfig-xml"><a href="#2-2-Mybatis的主配置文件-SqlMapConfig-xml" class="headerlink" title="2.2 Mybatis的主配置文件(SqlMapConfig.xml)"></a>2.2 Mybatis的主配置文件(SqlMapConfig.xml)</h2><p>XML 配置文件中包含了对 MyBatis 系统的核心设置，包括获取数据库连接实例的数据源（DataSource）以及决定事务作用域和控制方式的事务管理器（TransactionManager）。后面会再探讨 XML 配置文件的详细内容，这里先给出一个简单的示例：</p><pre><code class="hljs dust"><span class="xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><span class="xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span></span><span class="xml">  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span><span class="xml">  "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"development"</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"development"</span>&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>/&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$</span></span></span><span class="hljs-template-variable">&#123;driver&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>/&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$</span></span></span><span class="hljs-template-variable">&#123;url&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>/&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$</span></span></span><span class="hljs-template-variable">&#123;username&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>/&gt;</span></span><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"$</span></span></span><span class="hljs-template-variable">&#123;password&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">"</span>/&gt;</span></span><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span></span><span class="xml">  // 每一个mapper对应着一些sql操作的集合</span><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span></span><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span></span><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span></code></pre><p>当然，还有很多可以在 XML 文件中配置的选项，上面的示例仅罗列了最关键的部分。 注意 XML 头部的声明，它用来验证 XML 文档的正确性。environment 元素体中包含了事务管理和连接池的配置。mappers 元素则包含了一组映射器（mapper），这些映射器的 XML 映射文件包含了 SQL 代码和映射定义信息。</p><hr><h2 id="2-3-写在前面"><a href="#2-3-写在前面" class="headerlink" title="2.3 写在前面"></a>2.3 写在前面</h2><ul><li>Mybatis操作以<strong><em>SQLSession</em></strong>为基本单位，SQLSession基于SQLSessionFactory</li><li><strong><em>SqlSessionFactory</em></strong> 是核心的。</li><li>SqlSessionFactory 的实例可以通过 <strong><em>SqlSessionFactoryBuilder</em></strong> 获得</li><li>SqlSessionFactoryBuilder 则可以通过：<strong><em>XML 配置文件</em></strong> 或者 预先配置的 <strong><em>Configuration</em></strong> 实例来获取</li></ul><hr><h2 id="2-4-基于xml配置的Mybatis具体案例"><a href="#2-4-基于xml配置的Mybatis具体案例" class="headerlink" title="2.4 基于xml配置的Mybatis具体案例"></a>2.4 基于xml配置的Mybatis具体案例</h2><h3 id="2-4-0-Maven项目搭建"><a href="#2-4-0-Maven项目搭建" class="headerlink" title="2.4.0 Maven项目搭建"></a>2.4.0 Maven项目搭建</h3><blockquote><p>在pom.xml文件中添加Mybatis的坐标，如下：</p></blockquote><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><hr><h3 id="2-4-1-编写User实体类"><a href="#2-4-1-编写User实体类" class="headerlink" title="2.4.1 编写User实体类"></a>2.4.1 编写User实体类</h3><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span> </span>&#123;    <span class="hljs-keyword">private</span> Integer id;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> username;    <span class="hljs-keyword">private</span> Date birthday;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> sex;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> address;        <span class="hljs-comment">// getter/setter/toString略</span>&#125;</code></pre><hr><h3 id="2-4-2-编写持久层接口-IUserDao"><a href="#2-4-2-编写持久层接口-IUserDao" class="headerlink" title="2.4.2 编写持久层接口 IUserDao"></a>2.4.2 编写持久层接口 IUserDao</h3><pre><code class="hljs php">IUserDao 接口就是我们的持久层接口（也可以写成 UserDao 或者 UserMapper）,具体代码如下：<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IUserDao</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">    * 查询所有用户</span><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">List</span>&lt;User&gt; findAll();&#125;</code></pre><hr><h3 id="2-4-3-编写持久层接口的映射文件-IUserDao-xml"><a href="#2-4-3-编写持久层接口的映射文件-IUserDao-xml" class="headerlink" title="2.4.3 编写持久层接口的映射文件 IUserDao.xml"></a>2.4.3 编写持久层接口的映射文件 IUserDao.xml</h3><p>要求：</p><ol><li>创建位置：必须和持久层接口在相同的包中</li><li>名称：必须以持久层接口名称命名文件名，扩展名是.xml</li></ol><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> </span><span class="hljs-meta"> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> </span><span class="hljs-meta"> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span>  //命名空间 <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">"com.itheima.dao.IUserDao"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 配置查询所有操作 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"findAll"</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">"com.itheima.domain.User"</span>&gt;</span>        select * from user    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><hr><h3 id="2-4-4-编写-SqlMapConfig-xml-配置文件"><a href="#2-4-4-编写-SqlMapConfig-xml-配置文件" class="headerlink" title="2.4.4 编写 SqlMapConfig.xml 配置文件"></a>2.4.4 编写 SqlMapConfig.xml 配置文件</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span> </span><span class="hljs-meta"> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> </span><span class="hljs-meta"> <span class="hljs-meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 配置 mybatis 的环境 --&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">"mysql"</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 配置 mysql 的环境 --&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"mysql"</span>&gt;</span>            <span class="hljs-comment">&lt;!-- 配置事务的类型 --&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"JDBC"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">transactionManager</span>&gt;</span>            <span class="hljs-comment">&lt;!-- 配置连接数据库的信息：用的是数据源(连接池) --&gt;</span>             <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"POOLED"</span>&gt;</span>                 <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"driver"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"com.mysql.jdbc.Driver"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"jdbc:mysql://localhost:3306/ee50"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"root"</span>/&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1234"</span>/&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 告知 mybatis 映射配置的位置 --&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>         <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">"com/itheima/dao/IUserDao.xml"</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><hr><h3 id="2-4-5-编写Mybatis测试类"><a href="#2-4-5-编写Mybatis测试类" class="headerlink" title="2.4.5 编写Mybatis测试类"></a>2.4.5 编写Mybatis测试类</h3><pre><code class="hljs reasonml"><span class="hljs-comment">// 标准的操作应该我们手动处理掉异常</span><span class="hljs-comment">// 应该使用 try-catch-finally方式</span><span class="hljs-comment">// 这里为了篇幅，就直接抛出异常了...</span>public <span class="hljs-keyword">class</span> MybatisTest &#123;    public static void main(String<span class="hljs-literal">[]</span> args) throws Exception &#123;        <span class="hljs-comment">//1.读取配置文件</span>        InputStream <span class="hljs-keyword">in</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Resources</span>.</span></span>get<span class="hljs-constructor">ResourceAsStream(<span class="hljs-string">"SqlMapConfig.xml"</span>)</span>;        <span class="hljs-comment">//2.创建 SqlSessionFactory 的构建者对象</span>        SqlSessionFactoryBuilder builder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SqlSessionFactoryBuilder()</span>;        <span class="hljs-comment">//3.使用构建者创建工厂对象 SqlSessionFactory</span>        SqlSessionFactory factory = builder.build(<span class="hljs-keyword">in</span>);        <span class="hljs-comment">//4.使用 SqlSessionFactory 生产 SqlSession 对象</span>        SqlSession session = factory.<span class="hljs-keyword">open</span><span class="hljs-constructor">Session()</span>;        <span class="hljs-comment">//5.使用 SqlSession 创建 dao 接口的代理对象</span>        IUserDao userDao = session.get<span class="hljs-constructor">Mapper(IUserDao.<span class="hljs-params">class</span>)</span>;        <span class="hljs-comment">//6.使用代理对象执行查询所有方法</span>        List&lt;User&gt; users = userDao.find<span class="hljs-constructor">All()</span>;        for(User user : users) &#123;        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(user);        &#125;        <span class="hljs-comment">//7.释放资源</span>        session.close<span class="hljs-literal">()</span>;        <span class="hljs-keyword">in</span>.close<span class="hljs-literal">()</span>;    &#125;&#125;</code></pre><hr><h2 id="2-5-入门小结"><a href="#2-5-入门小结" class="headerlink" title="2.5 入门小结"></a>2.5 入门小结</h2><ol><li>使用Mybatis框架操作数据库，让我们的工作显得相对简单很多。因为只需要编写 Dao 接口并且按照mybatis<br>要求编写两个配置文件，就可以实现功能。远比我们之前的 jdbc 方便多了。</li><li>我们使用注解之后，将变得更为简单，只需要编写一个 mybatis 配置文件就够了。</li><li>这里面的一些具体的类、接口、操作的意义暂时可以先不管，后续我们再慢慢展开…</li></ol><hr><h1 id="3-Mybatis注解开发（介绍）"><a href="#3-Mybatis注解开发（介绍）" class="headerlink" title="3. Mybatis注解开发（介绍）"></a>3. Mybatis注解开发（介绍）</h1><h2 id="3-0-写在前面"><a href="#3-0-写在前面" class="headerlink" title="3.0 写在前面"></a>3.0 写在前面</h2><ul><li><p>Mybatis提供了一系列注解，可以实现对xml中的某些配置的精简化，从而使开发更加简便。</p></li><li><p>虽然注解开发十分简便，几乎可以做到0配置（xml），码代码速度快。值得一提的是，这种纯注解的方式，并不十分推荐。原因之一便是造成代码的可读性变差，可维护性变差。</p></li><li><p>开发中推荐使用”半”注解,”半”xml的方式。</p></li></ul><h2 id="3-1-注解开发"><a href="#3-1-注解开发" class="headerlink" title="3.1 注解开发"></a>3.1 注解开发</h2><h3 id="3-1-1-在持久层接口中添加注解"><a href="#3-1-1-在持久层接口中添加注解" class="headerlink" title="3.1.1 在持久层接口中添加注解"></a>3.1.1 在持久层接口中添加注解</h3><pre><code class="hljs dart">public <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">IUserDao</span> </span>&#123;    <span class="hljs-comment"><span class="markdown">/**</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet">    * </span>查询所有用户</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-bullet">    * </span>@return</span></span><span class="hljs-comment"><span class="markdown"><span class="hljs-code">    */</span></span></span>    <span class="hljs-meta">@Select</span>(<span class="hljs-string">"select * from user"</span>) <span class="hljs-comment">// 添加注解</span>    <span class="hljs-built_in">List</span>&lt;User&gt; findAll();&#125;</code></pre><h3 id="3-1-2-SqlMapConfig-xml配置"><a href="#3-1-2-SqlMapConfig-xml配置" class="headerlink" title="3.1.2 SqlMapConfig.xml配置"></a>3.1.2 SqlMapConfig.xml配置</h3><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 告知 mybatis 映射配置的位置 --&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"com.itheima.dao.IUserDao"</span>/&gt;</span>    // 在使用基于注解的 Mybatis 配置时，请移除 xml 的映射配置（IUserDao.xml）。    /**     在前文中，我们使用IUserDao.xml文件来配置，此时我们有了Select注解，就不再需要了，只需告知Mybatis，注解dao接口的位置即可。    */<span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span></code></pre><h3 id="3-1-3-注解简要介绍"><a href="#3-1-3-注解简要介绍" class="headerlink" title="3.1.3 注解简要介绍"></a>3.1.3 注解简要介绍</h3><blockquote><p>值得一提的是，这里将介绍几种基本的注解。具体操作，之后慢慢展开，这里我们只要知道一点， Mybatis的强大，让我们开发效率变得简单。</p></blockquote><pre><code class="hljs less"><span class="hljs-variable">@Insert:</span>实现新增<span class="hljs-variable">@Update</span>:实现更新<span class="hljs-variable">@Delete</span>:实现删除<span class="hljs-variable">@Select</span>:实现查询<span class="hljs-variable">@Result</span>:实现结果集封装<span class="hljs-variable">@Results</span>:可以与<span class="hljs-variable">@Result</span> 一起使用，封装多个结果集<span class="hljs-variable">@ResultMap</span>:实现引用<span class="hljs-variable">@Results</span> 定义的封装<span class="hljs-variable">@One</span>:实现一对一结果集封装<span class="hljs-variable">@Many</span>:实现一对多结果集封装<span class="hljs-variable">@SelectProvider</span>: 实现动态 SQL 映射<span class="hljs-variable">@CacheNamespace</span>:实现注解二级缓存的使用</code></pre><h1 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
      <tag>框架</tag>
      
      <tag>ssm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My Test001</title>
    <link href="/2020/07/28/My-Test001/"/>
    <url>/2020/07/28/My-Test001/</url>
    
    <content type="html"><![CDATA[<h2 id="第一个标题"><a href="#第一个标题" class="headerlink" title="第一个标题"></a>第一个标题</h2><h3 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h3><p><img src="/img/yql.jpg" srcset="/img/loading.gif" alt="岳绮罗"></p><hr><h2 id="第二个标题"><a href="#第二个标题" class="headerlink" title="第二个标题"></a>第二个标题</h2><p><img src="/img/avatar001.png" srcset="/img/loading.gif" alt="犇"></p><hr><h2 id="写到这儿"><a href="#写到这儿" class="headerlink" title="写到这儿"></a>写到这儿</h2><hr>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo如何添加分类和标签</title>
    <link href="/2020/07/28/Hexo%E5%8D%9A%E5%AE%A2-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/"/>
    <url>/2020/07/28/Hexo%E5%8D%9A%E5%AE%A2-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="1-文章分类"><a href="#1-文章分类" class="headerlink" title="1. 文章分类"></a>1. 文章分类</h1><h2 id="1-1-生成分类目录"><a href="#1-1-生成分类目录" class="headerlink" title="1.1 生成分类目录"></a>1.1 生成分类目录</h2><pre><code class="hljs routeros">hexo new<span class="hljs-built_in"> page </span>categories</code></pre><p>生成目录之后，会在根目录的source目录中多出一个categories目录。</p><h2 id="1-2-分类配置"><a href="#1-2-分类配置" class="headerlink" title="1.2 分类配置"></a>1.2 分类配置</h2><p>在categories目录中有一个index.md文件，在文件中添加type: categories</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">分类</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-10</span> <span class="hljs-number">14</span><span class="hljs-string">:47:40</span><span class="hljs-attr">type:</span> <span class="hljs-string">categories</span><span class="hljs-meta">---</span></code></pre><h2 id="1-3-增加多个分类"><a href="#1-3-增加多个分类" class="headerlink" title="1.3 增加多个分类"></a>1.3 增加多个分类</h2><p>在categories目录中有一个index.md文件，复制多份就可以了</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">分类一</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-10</span> <span class="hljs-number">14</span><span class="hljs-string">:47:40</span><span class="hljs-attr">type:</span> <span class="hljs-string">categories</span><span class="hljs-meta">---</span><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">分类二</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-10</span> <span class="hljs-number">14</span><span class="hljs-string">:47:40</span><span class="hljs-attr">type:</span> <span class="hljs-string">categories</span><span class="hljs-meta">---</span></code></pre><h2 id="1-4-给文章添加”分类”属性"><a href="#1-4-给文章添加”分类”属性" class="headerlink" title="1.4 给文章添加”分类”属性"></a>1.4 给文章添加”分类”属性</h2><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-10</span> <span class="hljs-number">14</span><span class="hljs-string">:47:40</span><span class="hljs-attr">categories:</span> <span class="hljs-string">分类</span><span class="hljs-meta">---</span></code></pre><p>文章分类属性只能存在一个，如果写了多个，只有第一个会启效果</p><h1 id="2-文章标签"><a href="#2-文章标签" class="headerlink" title="2. 文章标签"></a>2. 文章标签</h1><h2 id="2-1-生成标签目录"><a href="#2-1-生成标签目录" class="headerlink" title="2.1 生成标签目录"></a>2.1 生成标签目录</h2><pre><code class="hljs routeros">hexo new<span class="hljs-built_in"> page </span>tags</code></pre><p>生成目录之后，会在根目录的source目录中多出一个tags目录。</p><h2 id="2-2-标签配置"><a href="#2-2-标签配置" class="headerlink" title="2.2 标签配置"></a>2.2 标签配置</h2><p>在tags目录中有一个index.md文件，在文件中添加type: tags</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">标签</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-10</span> <span class="hljs-number">14</span><span class="hljs-string">:47:40</span><span class="hljs-attr">type:</span> <span class="hljs-string">tags</span><span class="hljs-meta">---</span></code></pre><h2 id="2-3-增加多个标签"><a href="#2-3-增加多个标签" class="headerlink" title="2.3 增加多个标签"></a>2.3 增加多个标签</h2><p>在tags目录中有一个index.md文件，复制多份就可以了</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">标签一</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-10</span> <span class="hljs-number">14</span><span class="hljs-string">:47:40</span><span class="hljs-attr">type:</span> <span class="hljs-string">tags</span><span class="hljs-meta">---</span><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">标签二</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-10</span> <span class="hljs-number">14</span><span class="hljs-string">:47:40</span><span class="hljs-attr">type:</span> <span class="hljs-string">tags</span><span class="hljs-meta">---</span></code></pre><h2 id="2-4-给文章添加”标签”属性"><a href="#2-4-给文章添加”标签”属性" class="headerlink" title="2.4 给文章添加”标签”属性"></a>2.4 给文章添加”标签”属性</h2><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020</span><span class="hljs-number">-02</span><span class="hljs-number">-10</span> <span class="hljs-number">14</span><span class="hljs-string">:47:40</span><span class="hljs-attr">categories:</span> <span class="hljs-string">分类</span><span class="hljs-attr">tags:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签一</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">标签二</span><span class="hljs-meta">---</span></code></pre><p>文章标签属性可存在多个</p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
